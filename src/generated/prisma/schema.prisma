// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  username       String   @unique
  birthdate      DateTime
  email          String   @unique
  password       String
  verified       Boolean  @default(false)
  profilePicture String?
  bio            String?

  posts         Post[]
  comments      Comment[]
  likedPosts    Post[]    @relation("PostLikes")
  likedComments Comment[] @relation("CommentLikes")

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")

  sentMessages Message[] @relation("SentMessages")

  chatsAsUserOne Chat[] @relation("ChatUserOne")
  chatsAsUserTwo Chat[] @relation("ChatUserTwo")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Post {
  id        String    @id @default(uuid())
  content   String
  type      PostType  @default(TEXT)
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likedBy   User[]    @relation("PostLikes")
}

model Comment {
  id        String      @id @default(uuid())
  content   String
  type      MessageType @default(TEXT)
  createdAt DateTime    @default(now())
  postId    String
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy   User[]      @relation("CommentLikes")
}

model Message {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  content   String
  type      MessageType @default(TEXT)
  senderId  String
  sender    User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  read    Boolean @default(false)

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userOneId String
  userTwoId String

  userOne User @relation("ChatUserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo User @relation("ChatUserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  deletedByUserOne Boolean   @default(false)
  deletedAtUserOne DateTime?

  deletedByUserTwo Boolean   @default(false)
  deletedAtUserTwo DateTime?

  messages Message[]

  @@unique([userOneId, userTwoId])
}

enum MessageType {
  TEXT
  GIF
}

enum PostType {
  TEXT
  IMAGE
}
